# how many patients dead or Aids (Ad) in each treatment group and what was the proportion in each group?
treat <- sum(actg320$tx==1)
non <-  sum(actg320$tx==0)
Ad.treat <- sum(actg320$tx==1 & actg320$event==1)
Ad.non <-  sum(actg320$tx==0 & actg320$event==1)
prop.Ad.treat <- Ad.treat/treat # approx 6%
prop.Ad.non <- Ad.non/non # approx 11%
# other potentially relevant numbers
# maximum number of days recorded
last.time <- max(actg320$time)
# how many times this number of days was recorded
sum(actg320$time==last.time)
# getting a quick feel of when people left
# visual inspection
hist(actg320$time, freq = FALSE)
hist(actg320$time[actg320$tx==1 & actg320$event==1], freq = FALSE)
hist(actg320$time[actg320$tx==0 & actg320$event==1], freq = FALSE)
# doesn't seem particularly exponential
# average time for Ad
av.time.treat <- sum(actg320$time[actg320$tx==1 & actg320$event==1])/Ad.treat
av.time.non <- sum(actg320$time[actg320$tx==0 & actg320$event==1])/Ad.non
# Fitting exponential distributions to time
## QUESTION! How to account for censored data?
# see section 2.3 and solutions for ex 2.5 - probability for unkowns taken as P(X>x)
# log likelihood for exponential distribution
ll.times <- function(lambda, x1, x0){
sum(log(1-pexp(x0,lambda)))+sum(dexp(x1,lambda,log=TRUE))
}
# lambda is rate of death per day, so will be small
lambda <- seq(0.0001,0.001,length=1000)
# x0 for each case is a vector of the times when people left without dying or getting A
# x1 is a vector of the times when people got A or died
# all patients on one distrubtion with one rate
x0.all<-c(actg320$time[actg320$event==0])
x1.all<-c(actg320$time[actg320$event==1])
ll.all <- sapply(lambda,ll.times,x0=x0.all ,x1=x1.all)
plot(lambda,ll.all-max(ll.all),type='l', main = "Log likelihood - lambda, all patients")
lambda.hat.all <- optimise(ll.times, range(lambda), x0=x0.all,x1=x1.all,maximum=TRUE)
# derived value
l.hat.all <- (Ad.non+Ad.treat)/sum(actg320$time)
# with treatment  (tx ==1)
x0.treat<-c(actg320$time[actg320$tx==1 & actg320$event==0])
x1.treat<-c(actg320$time[actg320$tx==1 & actg320$event==1])
ll.treat <- sapply(lambda,ll.times, x0=x0.treat,x1=x1.treat)
plot(lambda,ll.treat-max(ll.treat),type='l',main = "Log likelihood - lambda, treated patients")
lambda.hat.treat <- optimise(ll.times, range(lambda), x0=x0.treat,x1=x1.treat,maximum=TRUE)
# without treatment (tx ==0)
x0.non<-c(actg320$time[actg320$tx==0 & actg320$event==0])
x1.non<-c(actg320$time[actg320$tx==0 & actg320$event==1])
ll.non <- sapply(lambda,ll.times, x0=x0.non,x1=x1.non)
plot(lambda,ll.non-max(ll.non),type='l',main = "Log likelihood - lambda, non-treated patients")
lambda.hat.non <- optimise(ll.times, range(lambda), x0=x0.non,x1=x1.non,maximum=TRUE)
# one distribution with two different lambdas for control and treated
nll.sep <- function(lambdas,x0.0,x1.0,x0.1,x1.1){
-(sum(log(1-pexp(x0.0,lambdas[1])))+sum(dexp(x1.0,lambdas[1],log=TRUE))+sum(log(1-pexp(x0.1,lambdas[2])))+sum(dexp(x1.1,lambdas[2],log=TRUE)))
}
hats <- nlminb(c(0.0005,0.0002),nll.sep,x0.0=x0.non,x1.0=x1.non,x0.1=x0.treat,x1.1=x1.treat)
# Compare likelihood
AIC.all <- -2*max(ll.all)+2
AIC.sep <- 2*(nll.sep(hats$par,x0.0=x0.non,x1.0=x1.non,x0.1=x0.treat,x1.1=x1.treat))+4
#ll ratio test
ll.rat <-max(ll.all)+nll.sep(hats$par,x0.0=x0.non,x1.0=x1.non,x0.1=x0.treat,x1.1=x1.treat)
p.val <- pchisq(-2*ll.rat,df=1,lower.tail = FALSE)
# Formulating model where E(T0)=e^b0  and E(T1)=e^b0+b1 - so b1 is the treatment parameter
# since E(X)=1/lambda for exponential distr, that means b0=-log(lambda0) and b1=log(lambda0)-log(lambda1)
# think we need a variable change, but can't figure it out...
# turns out likelihood can be done easier see ex 11.5
# new info needed
x.non <- c(actg320$time[actg320$tx==0])
x.treat <- c(actg320$time[actg320$tx==1])
nll.beta <- function(bs,n0,n1,x0,x1){
n0*bs[1]+sum(exp(-bs[1])*x0)+n1*(bs[1]+bs[2])+sum(exp(-bs[1]-bs[2])*x1)
}
opt.beta <- nlminb(c(8,0.8),nll.beta, n0=Ad.non, n1= Ad.treat, x0 = x.non ,x1=x.treat)
# se for CI
# hessian doesn't work again, confused
hessian(ll.beta, b0=opt.beta$par[1], b1=opt.beta$par[2], n0=Ad.non, n1=Ad.treat, x0=x.non, x1=x.treat)
# profile ll for b1
b1 <- seq(-2,3,length=1000)
ll.beta <- function(b0,b1,n0,n1, x0,x1){
-n0*b0-sum(exp(-b0)*x0)-n1*(b0+b1)-sum(exp(-b0-b1)*x1)
}
pll.beta <- function(b1,n0,n1, x0,x1){
tmp.fun <- function(b0,b1,n0,n1,x0,x1){
ll.beta(b0,b1,n0,n1,x0,x1)
}
optimise(tmp.fun, c(-20,20), b1=b1,n0=n0,n1=n1,x0=x0,x1=x1, maximum = TRUE)$objective
}
lp.beta1 <- sapply(b1, pll.beta, n0=Ad.non, n1=Ad.treat, x0=x.non, x1=x.treat)
plot(b1,lp.beta1-max(lp.beta1),type='l')
opt.b1 <- optimise(pll.beta, c(-2,2), n0=Ad.non, n1=Ad.treat, x0=x.non, x1=x.treat, maximum = TRUE)
# se for CI
# hessian doesn't work again, confused
hessian(ll.beta, b0=opt.beta$par[1], b1=opt.beta$par[2], n0=Ad.non, n1=Ad.treat, x0=x.non, x1=x.treat)
# FI derived by hand
FI.b0<-exp(-opt.beta$par[1])*sum(x.non) +exp(-opt.beta$par[1]-opt.beta$par[2])*sum(x.treat)
se.b0 <- sqrt(1/FI.b0)
FI.b1<- exp(-opt.beta$par[1]-opt.beta$par[2])*sum(x.treat)
se.b1 <- sqrt(1/FI.b1)
# ll ratio test
ll.b1.hat<- ll.beta(b0=opt.beta$par[1], b1=opt.beta$par[2], n0=Ad.non, n1=Ad.treat, x0=x.non, x1=x.treat)
ll.b1.naught <-ll.beta(b0=-log(l.hat.all), b1=0, n0=Ad.non, n1=Ad.treat, x0=x.non, x1=x.treat)
ll.rat2 <- ll.b1.naught-ll.b1.hat
p.val2 <- pchisq(-2*ll.rat2,df=1,lower.tail=FALSE)
A.bin <- rep(1,len=A)
A.bin <- rep(1,len=A)
nA.bin <- rep(0,len=noA)
T_A.bin <- rep(1,len=T_A)
T_noA.bin <- rep(1,len=T_noA)
nonT_A.bin <- rep(0,len=nonT_A)
nonT_noA.bin <- rep(0, len = nonT_noA)
X <- cbind(c(A.bin,nA.bin),c(T_A.bin,nonT_A.bin,T_noA.bin,nonT_noA.bin))
colnames(X) <-c('AIDS','Treatment')
bindat<- as.data.frame(X)
model <-glm(bindat$AIDS~bindat$Treatment,family=binomial)
summary(model)
exp(coef(model))
# +/- 2*SE before empowering  to find 95% CI
exp(summary(model)$coefficients[2,1]+2*summary(model)$coefficients[2,2])
exp(summary(model)$coefficients[2,1]-2*summary(model)$coefficients[2,2])
exp(coef(model))
# hypothesis testing
# H_0: beta1 = 0 no treatment effect
# LRT
model2 <- glm(bindat$AIDS~1,family=binomial)
summary(model2)
LRT.stat <- 2*(logLik(model)-logLik(model2))
p.LRT <- 1-pchisq(LRT.stat,df=1)
# Wald test
W.stat <- (summary(model)$coefficients[2,1]/summary(model)$coefficients[2,2])^2
p.wald <- 1-pchisq(W.stat,df=1)
# Score test
# log likelihood for logistic regression
ll.logist <- function(x, y, b){
sum(y*t(x)*b-log(1+exp(t(x)*b)))
}
# score function (see p. 259)
s.logist <- function(x,y,b){
p <- exp(b * t(x))/(1+exp(b * t(x)))
sum((y-p)*x)
}
s.val <- s.logist(bindat$Treatment,bindat$AIDS,c(summary(model)$coefficients[1,1],0))
i.logist <- function(x,b){
p <- exp(b * t(x))/(1+exp(b * t(x)))
sum(p*(1-p)*x^2)
}
i.val <- i.logist(bindat$Treatment,c(summary(model)$coefficients[1,1],0))
S.stat <- s.val^2/i.val
p.score <- 1-pchisq(S.stat,df=1)
S.stat
p.score
#######################################
rm(list=ls())
#######################################
getwd()
#######################################
setwd("~/Documents/DTU/Semester5/metagenomicsMicrobiomeAnalysis/exercises/lecture06/")
#Nonpareil exercise
library(tidyverse)
library(broom)
#get data
# metadata <- read_csv("metadata.csv", skip=1) # we are making the first row as header!
metadata <- read_delim("metadata.csv", ",", skip = 1, col_names = c("Run", "Day", "Treatment"),)
dataset <- read_delim("nonpareil_indices.csv", ",")
metadata
dataset
dataset <- rename(dataset, Sample = 1, kappa=2, C=3, LR=4, modelR=5,LRstar=6,diversity=7) #renaming the columns
dataset <- dataset %>% mutate_at('Sample', str_replace, "_[0-9]", "")
#metadata <- rename(metadata, Run=1, Day=2, Treatment=3) #renaming the columns
dataset <- full_join(dataset, metadata, by = c("Sample" = "Run"))
ggplot(dataset,aes(x=factor(0),C)) + geom_violin(fill = "Grey") + geom_boxplot() + theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
ggsave("coverage.png")
ggplot(dataset, aes(diversity, C)) + geom_point()
lm(C ~ diversity, data = dataset) %>% tidy
ggplot(dataset, aes(x = diversity, y = C)) + geom_point() + geom_smooth(method = "lm") + annotate("text", x = 19, y = 1, label = "-0.136±0.009\np-val 6.06e-15" )
#ordering of the treatment
dataset$Treatment <- factor(dataset$Treatment, levels = c("Control", "pre-antibiotic", "Antibiotic", "Post-antibiotic"))
ggplot(data = dataset) + geom_violin(mapping = aes(x = Treatment, y = diversity, fill = Treatment), trim = FALSE)
#returns p-values - there is no statistical significant difference between the different groups.
pairwise.wilcox.test(dataset$diversity, dataset$Treatment, p.adjust.method = "bonferroni")
#######################################
rm(list=ls())
#######################################
setwd("~/Documents/DTU/Semester5/metagenomicsMicrobiomeAnalysis/exercises/lecture06/")
#Nonpareil exercise
library(tidyverse)
library(broom)
#get data
# metadata <- read_csv("metadata.csv", skip=1) # we are making the first row as header!
metadata <- read_delim("metadata.csv", ",", skip = 1, col_names = c("Run", "Day", "Treatment"),)
dataset <- read_delim("nonpareil_indices.csv", ",")
metadata
dataset
dataset <- rename(dataset, Sample = 1, kappa=2, C=3, LR=4, modelR=5,LRstar=6,diversity=7) #renaming the columns
dataset <- dataset %>% mutate_at('Sample', str_replace, "_[0-9]", "")
#metadata <- rename(metadata, Run=1, Day=2, Treatment=3) #renaming the columns
dataset <- full_join(dataset, metadata, by = c("Sample" = "Run"))
ggplot(dataset,aes(x=factor(0),C)) + geom_violin(fill = "Grey") + geom_boxplot() + theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
ggsave("coverage.png")
ggplot(dataset, aes(diversity, C)) + geom_point()
lm(C ~ diversity, data = dataset) %>% tidy
ggplot(dataset, aes(x = diversity, y = C)) + geom_point() + geom_smooth(method = "lm") + annotate("text", x = 19, y = 1, label = "-0.136±0.009\np-val 6.06e-15" )
#ordering of the treatment
dataset$Treatment <- factor(dataset$Treatment, levels = c("Control", "pre-antibiotic", "Antibiotic", "Post-antibiotic"))
ggplot(data = dataset) + geom_violin(mapping = aes(x = Treatment, y = diversity, fill = Treatment), trim = FALSE)
#returns p-values - there is no statistical significant difference between the different groups.
pairwise.wilcox.test(dataset$diversity, dataset$Treatment, p.adjust.method = "bonferroni")
# nonpareil for project
rm(list=ls())
library(tidyverse)
library(broom)
library(Nonpareil)
setwd("~/Documents/DTU/Semester5/metagenomicsMicrobiomeAnalysis/project/")
#setwd("~/Documents/DTU/Semester5/metagenomicsMicrobiomeAnalysis/project/")
metadata <- read_tsv("metadata.tsv", skip=1, col_names=FALSE)
dataset <- read_csv("nonpareil_indices.csv", skip=1, col_names=FALSE)
datasetJapan <- read_csv("nonpareil_indices_japan.csv", skip=1, col_names=FALSE)
head(dataset)
datasetJapan <- rename(datasetJapan, Sample = 1, kappa=2, C=3, LR=4, modelR=5, LRstar=6, diversity=7) #renaming the columns
dataset <- rename(dataset, Sample = 1, kappa=2, C=3, LR=4, modelR=5,LRstar=6,diversity=7) #renaming the columns
dataset <- dataset %>% mutate_at('Sample', funs(str_replace(., "HTAdapter", "Sample")))
dataset <- dataset %>% mutate_at('Sample', funs(str_replace(., "_FKDL202605956.1a.AK", "_")))
dataset <- dataset %>% mutate_at('Sample', funs(str_replace(., "_10.*$", "")))
dataset <- dataset %>% mutate_at('Sample', funs(str_replace(., "_6.*$", "")))
dataset <- dataset %>% mutate_at('Sample', funs(str_replace(., "_4.*$", "")))
datasetJapan <- datasetJapan %>% mutate_at('Sample', str_replace, "DRR025070",  "SampleJapan")
data <- rbind(datasetJapan, dataset)
metadata <- rename(metadata, SampleID=1, Country=2, SampleType=3) #renaming the columns
dataset <- full_join(data, metadata, by = c("Sample" = "SampleID"))
ggplot(dataset,aes(x=factor(0),C)) +
geom_violin(fill = "Grey") +
geom_boxplot() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# ggsave("coverage.png")
ggplot(dataset, aes(diversity, C)) + geom_point()
#checking the correlation between coverage and diversity.
lm(C ~ diversity, data = dataset) %>% tidy
ggplot(dataset, aes(x = diversity, y = C)) + geom_point() + geom_smooth(method = "lm") + annotate("text", x = 19, y = 1, label = "-0.136±0.009\np-val 6.06e-15" )
#plotting the diversity against sample type.
ggplot(data = dataset) +
geom_violin(mapping = aes(x =Country , y = diversity, fill = SampleType), trim = FALSE)
data_2 <- dataset %>%
mutate(SampleType=replace(SampleType, SampleType =="wild boar feces", "Wild life feces"))
pairwise.wilcox.test(data_2$diversity, data_2$SampleType, p.adjust.method = "bonferroni")
data_2 %>% select("SampleType", "C") %>%  summarise(m =mean(C))
# mean coverage for the two sample types:
coverage_mean <- data_2 %>% select("SampleType", "C") %>% group_by(SampleType) %>% summarise(m =mean(C))
coverage_mean
dataset
##plotting the nonpareil curves:
samples <- read.table('nonpareil.table.txt', sep='\t', header=TRUE, as.is=TRUE);
attach(samples)
nps <- Nonpareil.set(file, col=col, labels=name, plot.opts=list(plot.observed=FALSE), plot=F)
plot.Nonpareil.Set(x = nps, col = col, labels = name, legend.opts = F,
plot.observed = FALSE)
Nonpareil.legend(nps, x="bottomleft", cex=0.55)
##plotting the nonpareil curves:
samples <- read.table('nonpareil.table.txt', sep='\t', header=TRUE, as.is=TRUE);
attach(samples)
View(samples)
View(samples)
attach(samples)
samples
##plotting the nonpareil curves:
samples <- read.table('nonpareil.table.txt', sep='\t', header=TRUE, as.is=TRUE);
samples
attach(samples)
nps <- Nonpareil.set(file, col=col, labels=name, plot.opts=list(plot.observed=FALSE), plot=F)
# mean coverage for the two sample types:
coverage_mean <- data_2 %>% select("SampleType", "C") %>% group_by(SampleType) %>% summarise(m =mean(C))
##plotting the nonpareil curves:
samples <- read.table('nonpareil.table.txt', sep='\t', header=TRUE, as.is=TRUE);
attach(samples)
nps <- Nonpareil.set(file, col=col, labels=name, plot.opts=list(plot.observed=FALSE), plot=F)
plot.Nonpareil.Set(x = nps, col = col, labels = name, legend.opts = F,
plot.observed = FALSE)
Nonpareil.legend(nps, x="bottomleft", cex=0.55)
detach(samples)
plot.Nonpareil.Set(x = nps, labels = name, legend.opts = F,
plot.observed = FALSE)
Nonpareil.legend(nps, x="bottomleft", cex=0.55)
plot.Nonpareil.Set(x = nps, col = col, labels = name, legend.opts = F,
plot.observed = FALSE)
Nonpareil.legend(nps, x="bottomleft", cex=0.55)
##plotting the nonpareil curves:
samples <- read.table('nonpareil.table.txt', sep='\t', header=TRUE, as.is=TRUE);
plot.Nonpareil.Set(x = nps, col = col, labels = name, legend.opts = F,
plot.observed = FALSE)
Nonpareil.legend(nps, x="bottomleft", cex=0.55)
nps <- Nonpareil.set(file, col=col, labels=name, plot.opts=list(plot.observed=FALSE), plot=F)
nps <- Nonpareil.set(file, col=col, labels=name, plot.opts=list(plot.observed=FALSE), plot=F)
plot.Nonpareil.Set(x = nps, col = col, labels = name, legend.opts = F,
plot.observed = FALSE)
Nonpareil.legend(nps, x="bottomleft", cex=0.55)
nps
nps_LR <- select(nps, "LR")
nps_LR <- nps.Slot("LR")
nps_LR <- nps("LR")
nps_LR <- nps.LR
Nonpareil.read_data(nps, correction.factor)
Nonpareil.read_data(nps$LR, correction.factor)
Nonpareil.read_data(LR, correction.factor)
Nonpareil.read_data(nps$"LR", correction.factor)
print(nps)
nonpareil_indencies <- print(nps)
nonpareil_indencies
rm(list=ls())
library(tidyverse)
huang_all <- read.csv("~/Documents/DTU/thesis/Andet/Metadata/huang_all", header = TRUE, sep = '\t')
huang_all <- read.csv("~/Documents/DTU/thesis/Andet/Metadata/huang_all.tsv", header = TRUE, sep = '\t')
huang_all <- read.csv("~/Documents/DTU/thesis/Andet/Metadata/huang_all.tsv", header=TRUE, sep='\t')
huang_all <- read.csv(file="~/Documents/DTU/thesis/Andet/Metadata/huang_all.tsv", header=TRUE, sep='\t')
huang_all <- read.csv(file = "~/Documents/DTU/thesis/Andet/Metadata/huang_all.tsv", header = TRUE, sep = '\t')
huang_all <- read.table(file = "~/Documents/DTU/thesis/Andet/Metadata/huang_all.tsv", header = TRUE, sep = '\t')
huang_all <- read.table(file = "~/Documents/DTU/thesis/Andet/Metadata/huangAll.tsv", header = TRUE, sep = '\t')
#include for housing free-range/cage
metadata <- huang_all %>% mutate(Housing  = ifelse (location_name.farm. == "China:Guandong" | (location_name.farm. == "China:Hunan" & Feed == "not collected") , "free-range", "cage"))
#include breed based on farm and housing
metadata <- metadata %>%
mutate(Breed = case_when(location_name.farm. == "China:Hunan" & Housing == "cage" ~ "Local yellow-feather chickens",
location_name.farm. == "China:Hunan" & Housing == "free-range" ~ "Guangxi local chicken ",
location_name.farm. == "China:Shandong" ~ "Cobb 500",
location_name.farm. == "China:Shanxi" ~"Ross 308",
location_name.farm. == "China:Guandong" ~ "Yellow dwarf chicken",
location_name.farm. == "China:Henan" ~ "Hy-Line Variety Brown",
location_name.farm. == "China:Beijing" ~ "Arbor Acres broiler",
))
#include Type layer/broiler
metadata <- metadata %>%
mutate(type = ifelse(Breed == "Hy-Line Variety Brown" | Breed == "Local yellow-feather chickens", "layer", "broiler"))
#clean days to only be the number (still as string)
metadata <- metadata %>%
mutate(age.days. = str_remove(age.days., "-day$"))
metadata <- metadata %>%
filter(!grepl('^pooled', Sample.replicate))
View(metadata)
#save table.
write.csv(metadata,'/Users/Maja/Documents/DTU/thesis/Andet/Metadata/HuangMetadataClean.csv')
rm(list=ls())
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(broom)
library(Nonpareil)
setwd("~/Documents/DTU/thesis/thesis_code/nonpareil/")
##plotting the nonpareil curves:
samples <- read.table('nonpareil_table_standard.csv', sep=',', header=TRUE, as.is=TRUE);
View(samples)
##plotting the nonpareil curves:
samples <- read.table('nonpareil_table_standard.csv', sep=',', header=TRUE, as.is=TRUE);
attach(samples)
nps <- Nonpareil.set(file, col=col, labels=name, plot.opts=list(plot.observed=FALSE), plot=F)
plot.Nonpareil.Set(x = nps, col = col, labels = name, legend.opts = F,
plot.observed = FALSE)
Nonpareil.legend(nps, x="bottomleft", cex=0.55)
nps <- Nonpareil.set(file, col=col, labels=sample, plot.opts=list(plot.observed=FALSE), plot=F)
##plotting the nonpareil curves:
samples <- read.table('nonpareil_table_standard.csv', sep=',', header=TRUE, as.is=TRUE);
attach(samples)
nps <- Nonpareil.set(file, col=col, labels=sample, plot.opts=list(plot.observed=FALSE), plot=F)
plot.Nonpareil.Set(x = nps, col = col, labels = name, legend.opts = F,
plot.observed = FALSE)
Nonpareil.legend(nps, x="bottomleft", cex=0.55)
rm(list=ls())
library(tidyverse)
library(broom)
library(Nonpareil)
setwd("~/Documents/DTU/thesis/thesis_code/nonpareil/")
##plotting the nonpareil curves:
samples <- read.table('nonpareil_table_standard.csv', sep=',', header=TRUE, as.is=TRUE);
attach(samples)
nps <- Nonpareil.set(file, col=col, labels=name, plot.opts=list(plot.observed=FALSE), plot=F)
plot.Nonpareil.Set(x = nps, col = col, labels = name, legend.opts = F,
plot.observed = FALSE)
Nonpareil.legend(nps, x="bottomleft", cex=0.55)
Nonpareil.legend(nps, x="bottomleft", cex=0.45)
##plotting the nonpareil curves:
# samples <- read.table('nonpareil_table_standard.csv', sep=',', header=TRUE, as.is=TRUE);
samples <- read.table('nonpareil_table_60.csv', sep=',', header=TRUE, as.is=TRUE);
attach(samples)
nps <- Nonpareil.set(file, col=col, labels=name, plot.opts=list(plot.observed=FALSE), plot=F)
plot.Nonpareil.Set(x = nps, col = col, labels = name, legend.opts = F,
plot.observed = FALSE)
Nonpareil.legend(nps, x="bottomleft", cex=0.45)
detach(samples)
#generating nonpareil_indices - for violin plot on coverege
nonpareil_indencies <- print(nps)
setwd("~/Documents/DTU/Semester5/metagenomicsMicrobiomeAnalysis/project/")
metadata <- read_tsv("metadata.tsv", skip=1, col_names=FALSE)
dataset <- read_csv("nonpareil_indices.csv", skip=1, col_names=FALSE)
datasetJapan <- read_csv("nonpareil_indices_japan.csv", skip=1, col_names=FALSE)
head(dataset)
datasetJapan <- rename(datasetJapan, Sample = 1, kappa=2, C=3, LR=4, modelR=5, LRstar=6, diversity=7) #renaming the columns
dataset <- rename(dataset, Sample = 1, kappa=2, C=3, LR=4, modelR=5,LRstar=6,diversity=7) #renaming the columns
dataset <- dataset %>% mutate_at('Sample', funs(str_replace(., "HTAdapter", "Sample")))
dataset <- dataset %>% mutate_at('Sample', funs(str_replace(., "_FKDL202605956.1a.AK", "_")))
dataset <- dataset %>% mutate_at('Sample', funs(str_replace(., "_10.*$", "")))
dataset <- dataset %>% mutate_at('Sample', funs(str_replace(., "_6.*$", "")))
dataset <- dataset %>% mutate_at('Sample', funs(str_replace(., "_4.*$", "")))
datasetJapan <- datasetJapan %>% mutate_at('Sample', str_replace, "DRR025070",  "SampleJapan")
data <- rbind(datasetJapan, dataset)
metadata <- rename(metadata, SampleID=1, Country=2, SampleType=3) #renaming the columns
dataset <- full_join(data, metadata, by = c("Sample" = "SampleID"))
dataset
rm(list=ls())
rm(list=ls())
library(tidyverse)
library(broom)
library(Nonpareil)
setwd("~/Documents/DTU/thesis/thesis_code/nonpareil/")
##plotting the nonpareil curves:
# samples <- read.table('nonpareil_table_standard.csv', sep=',', header=TRUE, as.is=TRUE);
samples <- read.table('nonpareil_table_60.csv', sep=',', header=TRUE, as.is=TRUE);
attach(samples)
nps <- Nonpareil.set(file, col=col, labels=name, plot.opts=list(plot.observed=FALSE), plot=F)
plot.Nonpareil.Set(x = nps, col = col, labels = name, legend.opts = F,
plot.observed = FALSE)
Nonpareil.legend(nps, x="bottomleft", cex=0.45)
detach(samples)
#generating nonpareil_indices - for violin plot on coverege
nonpareil_indencies <- print(nps)
ggplot(nonpareil_indencies,aes(x=factor(0),C)) +
geom_violin(fill = "Grey") +
geom_boxplot() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
typeof(nonpareil_indencies)
nonpareil_indencies
View(nonpareil_indencies)
nonpareil_indencies <- data.frame(nonpareil_indencies)
ggplot(nonpareil_indencies,aes(x=factor(0),C)) +
geom_violin(fill = "Grey") +
geom_boxplot() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
##plotting the nonpareil curves:
samples <- read.table('nonpareil_table_standard.csv', sep=',', header=TRUE, as.is=TRUE);
attach(samples)
nps <- Nonpareil.set(file, col=col, labels=name, plot.opts=list(plot.observed=FALSE), plot=F)
plot.Nonpareil.Set(x = nps, col = col, labels = name, legend.opts = F,
plot.observed = FALSE)
Nonpareil.legend(nps, x="bottomleft", cex=0.45)
nps <- Nonpareil.set(file, col=col, labels=name, plot.opts=list(plot.observed=FALSE), plot=F)
plot.Nonpareil.Set(x = nps, col = col, labels = name, legend.opts = F,
plot.observed = FALSE)
# Nonpareil.legend(nps, x="bottomleft", cex=0.45)
detach(samples)
#generating nonpareil_indices - for violin plot on coverege
nonpareil_indencies <- print(nps)
nonpareil_indencies <- data.frame(nonpareil_indencies)
ggplot(nonpareil_indencies,aes(x=factor(0),C)) +
geom_violin(fill = "Grey") +
geom_boxplot() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(nonpareil_indencies,aes(x=factor(0),C)) +
geom_violin(fill = "white") +
geom_boxplot() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggsave("coverage_violin.png")
rm(list=ls())
library(tidyverse)
library(broom)
library(Nonpareil)
setwd("~/Documents/DTU/thesis/thesis_code/nonpareil/")
##plotting the nonpareil curves:
samples <- read.table('nonpareil_table_standard.csv', sep=',', header=TRUE, as.is=TRUE);
attach(samples)
nps <- Nonpareil.set(file, col=col, labels=name, plot.opts=list(plot.observed=FALSE), plot=F)
plot.Nonpareil.Set(x = nps, col = col, labels = name, legend.opts = F,
plot.observed = FALSE)
# Nonpareil.legend(nps, x="bottomleft", cex=0.45)
detach(samples)
attach(samples)
nps <- Nonpareil.set(file, col=col, labels=name, plot.opts=list(plot.observed=FALSE), plot=F)
plot.Nonpareil.Set(x = nps, col = col, labels = name, legend.opts = F,
plot.observed = FALSE)
theme(plot.title = element_text(size = rel(2)))
# Nonpareil.legend(nps, x="bottomleft", cex=0.45)
detach(samples)
plot.Nonpareil.Set(x = nps, col = col, labels = name, legend.opts = F,
plot.observed = FALSE)
theme(plot.title = element_text(size = rel(2)))
plot.Nonpareil.Set(x = nps, col = col, labels = name, legend.opts = F,
plot.observed = FALSE) +
theme(plot.title = element_text(size = rel(2)))
nps <- Nonpareil.set(file, col=col, labels=name, plot.opts=list(plot.observed=FALSE), plot=F)
plot.Nonpareil.Set(x = nps, col = col, labels = name, legend.opts = F,
plot.observed = FALSE) +
theme(plot.title = element_text(size = rel(2)))
plot.Nonpareil.Set(x = nps, col = col, labels = name, legend.opts = F,
plot.observed = FALSE)
nps <- Nonpareil.set(file, col=col, labels=name, plot.opts=list(plot.observed=FALSE), plot=F)
plt = plot.Nonpareil.Set(x = nps, col = col, labels = name, legend.opts = F,
plot.observed = FALSE)
# Nonpareil.legend(nps, x="bottomleft", cex=0.45)
plt+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
attach(samples)
nps <- Nonpareil.set(file, col=col, labels=name, plot.opts=list(plot.observed=FALSE), plot=F)
plt = plot.Nonpareil.Set(x = nps, col = col, labels = name, legend.opts = F,
plot.observed = FALSE)
# Nonpareil.legend(nps, x="bottomleft", cex=0.45)
plt+theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))
