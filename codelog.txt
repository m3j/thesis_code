#collection of commands used in my thesis:
# if they have been run on qsub the command used to run the file as well as the code run in the file is present. otherwise it has been executed on iqsub. 
# the input files have been examplified in exampleFiles/ depending on your naming conventions there will be some differences but will give you the overall structure of the files. 

___________________________________________________________________________

###data download: qsub_chicken_data_download.sh
# data downloads from NCBI using SRA tools, converted to zipped fastq files.  

#command within qsub file:
cd /home/projects/dtu_00009/data/chicken_data_TM

filename=$1

#prefetch --output-directory /home/projects/dtu_00009/data/chicken_data_TM/raw_data "$filename"

fastq-dump --gzip --split-files "$filename".sra

#command to run qsub
parallel "qsub -F '{1}' /home/projects/dtu_00009/data/Scripts/qsub_chicken_data_download.sh" :::: /home/projects/dtu_00009/data/chicken_data_TM/raw_data/run_id.list

#Example of run_id.list is seen in exampleFiles/example0.txt

___________________________________________________________________________

### subsampling on predefined fastsubset.list : qsub_data_subset.sh

while read f; do
  seqtk sample $f 10000 | gzip - -c > /home/projects/dtu_00009/data/chicken_data_TM/subset/$f 
done <fastq_subset.list

#exaple of fastq_subset.list can be seen in exampleFiles/example1.txt
_________________________________________________________________________

###Quality check: on iqsub with 1 node and 40 cores.  

# for test on subset: fastqc -o /fastQC -t 38 *.fastq.gz

cd /home/projects/dtu_00009/data/chicken_data_TM

#250MB pr thread
fastqc -o /fastQC/initial_QC -t 40 *.fastq.gz
fastqc -o ../fastQC -t 40 *.fastq.gz

conda activate env_python3.6
multiqc .
___________________________________________________________________________

## removing adapters and first 5 bases with bbmap and bbduk  
# qsub_bbmap.sh

parallel --xapply -j 4 "bbduk.sh ref=/home/projects/dtu_00009/data/chicken_data_TM/adapter.fa forcetrimleft=5 i
n1={1} in2={2} out1=Trimmed/{1} out2=Trimmed/{2} ktrim=r k=23 mink=11 hdist=1 hdist2=0 tpe tbo" :::: r1.list ::
:: r2.list


#2.omgang med parallels udenfor

parallel --xapply "qsub -F '{1} {2}' /home/projects/dtu_00009/data/Scripts/qsub_bbmap.sh " :::: /home/projects/dtu_00009/data/chicken_data_TM/r1.list :::: /home/projects/dtu_00009/data/chicken_data_TM/r2.list


R1=$1
R2=$2

bbduk.sh ref=/home/projects/dtu_00009/data/chicken_data_TM/adapters.fa forcetrimleft=5 in1="$R1" in2="$R2" out1=/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/Trimmed/"$R1"out2=/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/Trimmed/"$R2" ktrim=r k=23 mink=11 hdist=1 hdist2=0 tpe tbo


#Examples of r1.list and r2.list can be seen in exampleFiles/example2.txt and  exampleFiles/example3.txt respectively. 

#bbduk flags describtion:
ktrim=r stands for adapter trimming from the right aka the 3’ end
k: size of kmer
mink: incase you have adapter sequence shorter than the stated size of k, the mink option allows to look at kmers shorter than k  and down to the value of mink. So in this case it will also look at kmers in the size of 22 - 11. 
hdist:  determines how many kmers are stored in memory, it stands for hamming distance and is a measure of difference between strings. 11001 vs 11011 has a hamming distance of 1. hdist=1 will allow storing kmers with a distance of 1 and will store more kmers than hdist=0 which will store only the unique kmers.   
hdist2: is the same as hdist but only applies to kmers  shorter than the chosen kmer length. 
tpe: this flag specifies that both reads (in paired-end reads) should be trimmed to the same length. 
tbo: specifies to trim adapters based on pair overlap detection using BBMerge.

The adapter reference file used is provided by BBMap at their GitHub called adapters.fa 
___________________________________________________________________________

## removing low quality with sickle :
# qsub_sickle.sh 

ls Trimmed | grep '_1.fastq.gz$' > trimmed_r1.list
ls Trimmed | grep '_2.fastq.gz$' > trimmed_r2.list

#2omgang m parallels udenfor
parallel --xapply "qsub -F '{1} {2}' /home/projects/dtu_00009/data/Scripts/qsub_sickle.sh " :::: /home/projects/dtu_00009/data/chicken_data_TM/trimmed_r1.list :::: /home/projects/dtu_00009/data/chicken_data_TM/trimmed_r2.list

R1=$1
R2=$2

sickle pe -t sanger -g -f Trimmed/"$R1" -r Trimmed/"$R2" -l 50 -o Hquality/"$R1" -p Hquality/"$R2" -s Hquality/"$R1"_singles.fastq.gz

#examples of trimmed_r1.list and trimmed_r2.list are seen in exampleFiles/example2.txt and  exampleFiles/example3.txt respectively.

#flag describtions for sickle
pe: paired end reads
-t sanger:  indicates the quality score metric. Illumina quality using CASAVA >= v1.8 is Sanger encoded, while the illumina tag is used for versions 1.3 - 1.7. 
-g : Output gzipped files
-l 50 :  minimum accepted read length 
___________________________________________________________________________

# removing PhiX contamination - running with parallels. - remember to specify threads (-t= )
cd /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/Hquality

# for the paired reads
parallel --xapply "qsub -F '{1} {2}' /home/projects/dtu_00009/data/Scripts/qsub_Phix_removal.sh" :::: /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/HQ_read1.list :::: /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/HQ_read2.list

#for the single reads
parallel "qsub -F '{1}' /home/projects/dtu_00009/data/Scripts/qsub_Phix_removal.sh" :::: /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/HQ_read_singles.list


#paired
file_name1=$1
file_name2=$2

bbduk.sh in1=/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/Hquality/"$file_name1" in2=/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/Hquality/"$file_name2" out1=/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/NoPhiX2/"$file_name1" out2=/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/NoPhiX2/"$file_name2" ref=/home/projects/dtu_00009/data/chicken_data_TM/phix174_ill.ref.fa k=31 hdist=1 t=32

#singles
file_name1=$1

bbduk.sh in=/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/Hquality/"$file_name1" out=/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/NoPhiX2/"$file_name1" ref=/home/projects/dtu_00009/data/chicken_data_TM/phix174_ill.ref.fa k=31 hdist=1 t=32


#examples of HQ_read1.list and HQ_read2.list are seen in exampleFiles/example2.txt and  exampleFiles/example3.txt respectively. Example of HQ_read_singles.list can be seen in exampleFiles/example4.txt


___________________________________________________________________________

#when running host contamination on gallus gallus and Brachypodium distachyon - related to all relavent corn species - but with a choromosome size below 500 MB. 

#paired
parallel --xapply "qsub -F '{1} {2}' /home/projects/dtu_00009/data/Scripts/qsub_bbmap_contamination_paired.sh" :::: /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/NoPhiX_r1.list :::: /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/NoPhiX_r2.list


R1=$1
R2=$2

bbmap.sh in1=/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/NoPhiX2/"$R1" in2=/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/NoPhiX2/"$R2" ref=/home/projects/dtu_00009/data/reference_genomes/contamination_refs.fna.gz outu1=/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/No_contamination/"$R1" outu2=/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/No_contamination/"$R2" nodisk=true -t=32

#singles

parallel "qsub -F '{1}' /home/projects/dtu_00009/data/Scripts/qsub_bbmap_contamination_singles.sh" :::: /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/NoPhiX_singles.list


R1=$1

#Running bbmap on singleton reads
bbmap.sh in=/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/NoPhiX2/"$R1" ref=/home/projects/dtu_00009/data/reference_genomes/contamination_refs.fna.gz outu=/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/No_contamination/"$R1" nodisk=true -t=32


#examples of NoPhiX_r1.list and NoPhiX_r2.list are seen in exampleFiles/example2.txt and  exampleFiles/example3.txt respectively. Example of NoPhiX_singles.list can be seen in exampleFiles/example4.txt

nodisk: to enable to run parallel without corrupting the index file this was not written to disk but kept in memory. 
-t : number of threads utilised.
___________________________________________________________________________


### nonpareil
#make a list of all the preprocessed reads  - nonpareil only needs the forward reads.

ls /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/No_contamination | grep '_1.fastq.gz$' > /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/preprocessed_r1.list

#unziping the files in No_contamination folder. 

parallel "qsub -F '{1}' /home/projects/dtu_00009/data/Scripts/qsub_unzip_nonpareil.sh" :::: /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/preprocessed_r1.list

filename=$1

gunzip -d /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/combined_db_bins_refs/"$filename"

#preprocessed_r1.list is in the form of exampleFiles/example2.txt


# creating a new list with the unzipped file names - so without .gz in the end. 
ls /home/projects/dtu_00009/data/chicken_data_TM/2_omgangNo_contamination | grep '_1.fastq$' > /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/preprocessed_r1_unzipped.list

# running the nonpareil
parallel " qsub -F '{1}' /home/projects/dtu_00009/data/Scripts/qsub_nonpareil.sh" :::: /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/preprocessed_r1_unzipped.list

filename=$1
nonpareil -s /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/No_contamination/"$filename" -T kmer -b
/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/nonpareil60/"$filename" -f fastq -t 32 -L 60

# rezip on the files again. 
parallel "qsub -F '{1}' /home/projects/dtu_00009/data/Scripts/qsub_rezip_after_nonpareil.sh" :::: /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/preprocessed_r1_unzipped.list

filename=$1
gzip /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/No_contamination/"$filename"


#preprocessed_r1_unzipped.list follows the format of exampleFiles/example5.txt

___________________________________________________________________________

## Assembley

#running SPAdes - SPAdes will run error correction and use multiple k-mers at the same time when it is doing the assembly. 
# some SPAdes options 
-t <int> (or --threads <int>) :Number of threads. The default value is 16.

-m <int> (or --memory <int>) Set memory limit in Gb. SPAdes terminates if it reaches this limit. The default value is 250 Gb. Actual amount of consumed RAM will be below this limit. Make sure this value is correct for the given machine. SPAdes uses the limit value to automatically determine the sizes of various buffers, etc.



parallel --xapply "qsub -F '{1} {2} {3}' /home/projects/dtu_00009/data/Scripts/qsub_spades.sh " :::: /home/projects/dtu_00009/d
ata/chicken_data_TM/2_omgang/preprocessed_r1.list :::: /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/preprocessed_r2.li
st :::: /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/preprocessed_singles.list

conda activate env_SPAdes

R1=$1
R2=$2
S1=$3

#Run commands
output_dir="${R1%%_*}"

spades.py --meta -k 21,33,55,77 -o /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/"$output_dir" -1 "$R1" -
2 "$R2" -s "$S1"

#Deactivate conda enviroment
conda deactivate


#The lists preprocessed_r1.list, preprocessed_r2.list, and preprocessed_singles.list are in the format of file exampleFiles/example2.txt, exampleFiles/example3.txt and exampleFiles/example4.txt respectively.
___________________________________________________________________________

#VAMB

#Path to concatenate.py - to concatenate the output from assembley to make a reference to generate BAM files. 
/home/projects/dtu_00009/people/majjag/Bin/Programs/miniconda3/envs/env_vamb/bin/concatenate.py 
 - måske det er nok at aktivere conda env_vamb

concatenate.py output_file input_file1 input_file2 ... 

#a list of all the files with their path generated in contigs.txt wiht jupyternotebook "vamb - file prep". just replace the new lines with spaces. 

#probably you can use the following instead of the long code below when running on iqsub. 
/home/projects/dtu_00009/people/majjag/Bin/Programs/miniconda3/envs/env_vamb/bin/concatenate.py /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/catalogue.fna.gz /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/*/contigs.fasta

# actual command run on iqsub:
/home/projects/dtu_00009/people/majjag/Bin/Programs/miniconda3/envs/env_vamb/bin/concatenate.py /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/catalogue.fna.gz /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/ERR2241647/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/ERR2241649/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/ERR2241651/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/ERR2241653/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/ERR2241655/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/ERR2241848/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/ERR2241849/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/ERR2241855/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/ERR2241856/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/ERR2241860/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/ERR2241887/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/ERR2241890/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/ERR2241891/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/ERR2241893/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/ERR2241899/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/ERR2241919/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/ERR2241923/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/ERR2241925/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/ERR2241927/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/ERR2241945/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323088/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323134/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323167/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323172/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323197/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323200/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323205/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323243/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323244/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323247/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323249/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323250/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323252/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323295/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323296/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323338/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323340/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323343/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323350/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323367/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323384/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323414/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323449/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323493/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323502/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323503/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323514/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323516/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323530/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323550/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR6323556/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR9113691/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR9113706/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR9113707/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR9113725/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR9113737/contigs.fasta


#test with three samples:
/home/projects/dtu_00009/people/majjag/Bin/Programs/miniconda3/envs/env_vamb/bin/concatenate.py /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb_test/catalogue.fna.gz /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/ERR2241647/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR9113725/contigs.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/spades_output/SRR9113737/contigs.fasta 


#generating BAM files 
# first indexing og catalog - using the catalogue.fna.gz file just created. 

minimap2 -I 32g -d catalogue.mmi /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb_test/catalogue.fna.gz

#align reads back to reference based on SPAdes denovo assembley:
#getting the first column from samples2data.txt to get a list of samples id
cut -f 1 samples2data.txt > sampleName 

# samples2data.txt are greated in the vamb_file_prep notebook and has the format found in exampleFiles/example6.txt and sampleName will have format of exampleFiles/example0.txt

# command in the Script file qsub_minimap_vamb.sh:
_________
cd /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb
sample=$1

conda activate env_vamb

minimap2 -t -I 32g 8 -N 50 -ax sr catalogue.mmi  /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/No_contamination/"$sample"_1.fastq.gz /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/No_contamination/"$sample"_2.fastq.gz | samtools view -F 3584 -b --threads 8 > /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/"$sample".bam

conda deactivate 
________

#commandline runing qsub:
parallel "qsub -F '{1}' /home/projects/dtu_00009/data/Scripts/qsub_minimap_vamb.sh" :::: /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb_test/sampleName 


# to generate the depth matrix on bam files they need to be sorted: 
samtools sort infile.bam outfile.sorted.bam
_________
cd /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam
sample=$1

conda activate env_vamb

samtools sort --threads 8 /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/"$sample".bam -o /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/"$sample".sorted.bam 

conda deactivate 
____________

# parallel "qsub -F '{1}' /home/projects/dtu_00009/data/Scripts/qsub_bam_sort_vamb.sh" :::: /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb_test/sampleName


#For generating depth matrix from MetaBat - using iqsub (remember correct environment env_vamb)
#Usage: jgi_summarize_bam_contig_depths <options> sortedBam1 [ sortedBam2 ...]

#maybe this can be used instead of the long code below:
jgi_summarize_bam_contig_depths --outputDepth /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/jgi_depthMatrix /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/*.sorted.bam

#A list of the files with path is generated in the vamb_file_prep notebook and found in data56_related_files/vamb_files/sorted_bam_pathList.txt , just need to replace newlines with spaces.

jgi_summarize_bam_contig_depths --outputDepth /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/jgi_depthMatrix /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/ERR2241647.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/ERR2241649.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/ERR2241651.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/ERR2241653.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/ERR2241655.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/ERR2241848.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/ERR2241849.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/ERR2241855.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/ERR2241856.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/ERR2241860.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/ERR2241887.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/ERR2241890.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/ERR2241891.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/ERR2241893.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/ERR2241899.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/ERR2241919.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/ERR2241923.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/ERR2241925.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/ERR2241927.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/ERR2241945.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323088.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323134.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323167.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323172.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323197.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323200.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323205.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323243.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323244.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323247.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323249.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323250.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323252.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323295.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323296.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323338.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323340.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323343.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323350.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323367.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323384.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323414.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323449.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323493.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323502.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323503.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323514.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323516.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323530.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323550.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR6323556.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR9113691.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR9113706.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR9113707.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR9113725.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/bam/sorted/SRR9113737.sorted.bam 

#test on three samples:
jgi_summarize_bam_contig_depths --outputDepth /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb_test/depthMatrix.jgi /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb_test/bam/sorted/ERR2241647.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb_test/bam/sorted/SRR9113725.sorted.bam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb_test/bam/sorted/SRR9113737.sorted.bam 

# then to running actual vamb! 

vamb -o SEP --outdir OUT --fasta FASTA --bamfiles BAM1 BAM2 [...] --minfasta 200000 --jgi depthMatrix.jgi

# vamb will name each sample from 1 to X based on the order of the sampleName file used when creating the catalouge.fna.gz file as done above. The -o flag indicates the seperater that will be used between the sample number and the cluster number. I used C ending with a naming convention of S2C394 for sample 2 cluster 394. underscore could also have been used. 


vamb -o C --outdir /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/vamb_output/ --fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/catalogue.fna.gz --jgi /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/depthMatrix.jgi --minfasta 200000 


qsubfile :
cd /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb_test/
conda activate env_vamb

JGI=$3
FASTA=$2
OUTDIR=$1

vamb -o C --cuda --outdir "$1" --fasta "$2" --jgi "$3"  --minfasta 200000

conda deactivate
_________


qsub -F '/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/vamb_output /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/catalogue.fna.gz /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/depthMatrix.jgi' /home/projects/dtu_00009/data/Scripts/qsub_vamb.sh


# the catalogue.fna.gz has the format of exampleFiles/example7 (very short example, but will contain all the contigs from all the samples in a fasta file with header format >S2CNODE_5259_length_2006_cov_15.766719 where the first number after the S indicates the sample number). The depthMatrix.jgi is also created above and has the format as shown in exampleFiles/example8.txt

___________________________________________________________________________________________

#checkM 

# qsub_checkM.sh
conda activate env_vamb

results_file=$1
input_bins=$2
output_dir=$3

checkm lineage_wf -t 32 -f "$results_file" --tab_table "$input_bins" "$output_dir"

conda deactivate
_________

qsub -F '/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/checkM/results_file /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/vamb_output/bins /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/checkM' /home/projects/dtu_00009/data/Scripts/qsub_checkM.sh

# results_file is the name of the file containing the CheckM results, input_bins is a folder containing the bins created by vamb, and last input is the path to the output directory. 
___________________________________________________________________________

# GDTB

# qsub_GTDB.sh needs a fat node for memory
#gtdbtk classify_wf --genome_dir INPUT --out_dir OUT_DIR --cpus 20 --force --debug


conda activate gtdbtk-1.3.0

INPUT=$1
OUT_DIR=$2

gtdbtk classify_wf --genome_dir "$INPUT" --out_dir "$OUT_DIR" --cpus 1 --force --debug

conda deactivate

# on full data 
qsub -F '/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/vamb_output/bins /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/GTDB' /home/projects/dtu_00009/data/Scripts/qsub_GTDB.sh

# INPUT is a path to the folder containing the bins created by vamb
___________________________________________________________________________

# dRep
# COMPARE

#dRep is able to perform rapid genome comparisons for a group of genomes and visualize their relatedness. It has two modes, compare and dereplicate. compare is used here to see the relatedness between the genomes. just below we use dereplicate to remove genomes deemed to be the same. 

dRep compare '$OutputDir' -g '$inputFiles'

# qsub_drep_compare.sh
conda activate env_drep

#code for running dRep
outputDir=$1

dRep compare "$outputDir" -g /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/vamb_output/bins/* -d

conda deactivate



#commandline
qsub -F '/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/drep/compare' /home/projects/dtu_00009/data/Scripts/qsub_drep_compare.sh

# incase you dont want to use vamb_output/bins/* as input you can use /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/drep/genomePathList instead as a parameter. genomePathList is created in the notebook dRep_genomePathList as is on the format of exampleFiles/example9.txt

____________
#DEREPLICATE

conda activate env_drep

#code for running dRep
outputDir=$1

dRep dereplicate "$outputDir" -g /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/vamb_output/bins/* -d -comp 50 -con 10

#using filtering levels equal to middel quality of contamination 10% and completness of 50% 

#commandline
qsub -F '/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/drep/dereplicate' /home/projects/dtu_00009/data/Scripts/qsub_drep_dereplicate.sh

___________________________________________________________________________

#Downloadning reference genomes. They wouldn't download all in one go so had to take the remaining run_ids for a second go. The refernece genomes are 'only' assembles so I found a script to download them with, here: https://github.com/ctSkennerton/scriptShed/blob/master/download_ncbi_assembly.py  (renamed it for unknown reasons to downloadAssemblyFromAccession.py)

### Here follows the user commands:
# downloading all files listed in run_ids.

python /home/projects/dtu_00009/data/Scripts/downloadAssemblyFromAccession.py /home/projects/dtu_00009/data/reference_genomes/Lactobacillaceae_refs/Lactobacillaceae_AccesssionNames -f fna

qsub /home/projects/dtu_00009/data/Scripts/qsub_refgenomes_download.sh

#Lactobacillaceae_AccesssionNames is in the format of exampleFiles/example10

# to run in parallel this could be used. 
ID=$1

python /home/projects/dtu_00009/data/Scripts/downloadAssemblyFromAccession.py "$ID" -f fna

#commandline
parallel "qsub -F '{1}'  /home/projects/dtu_00009/data/Scripts/qsub_refgenomes_download.sh" :::: /home/projects/dtu_00009/data/reference_genomes/Lactobacillaceae_refs/Lactobacillaceae_AccesssionNames

___________________________________________________________________________


# InStrain
Skal bruge en mapping og fastafiler -  reference genomer (/home/projects/dtu_00009/data/reference_genomes/Lactobacillus_refs) + HQ_derepped Bins ( ⁨thesis_code⁩/data56_related_files⁩⁨)  


profile:  inStrain profile .bam_file .fasta_file -o IS_output_name

compare :   inStrain compare -i IS_output_1 IS_output_2 IS_output_3

Each inStrain profile object used by InStrain compare must be made from reads mapped to the same fasta file.

1. Map "reads" to the genomes we want to profile - HQ_lactobacillacea bins + ref genomes against all reads. 
2. Gene calling using prodigal 
3. Run instrain


# copy drep_bins from vamb_output to seperate folder in /inStrain/ref_bins/
for FILE in $(cat /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/ref_bins/drep_lactobacillaceae_bins.csv)
do
    cp ${FILE} /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/ref_bins/
done

Renaming headers in bin files to match format in database genomes. remove before first space and after comma. 
>S14CNODE_5258_length_4433_cov_6.103765 species_name genome id, 
Endend up making a python script

python Append_Header_Fasta.py /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/ref_bins/ /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/ref_bins/ref_bins_header.csv 

unzip genomes from DB to be able to run dRep:
parallel "qsub -F '{1}' /home/projects/dtu_00009/data/Scripts/qsub_unzip_nonpareil.sh" :::: /home/projects/dtu_00009/data/reference_genomes/Lactobacillaceae_refs/genomes.txt

#genomes.txt has the format of exampleFiles/example11.txt

Drep on database genomes and drep_bins. 

conda activate env_drep

#code for running dRep
outputDir=$1

dRep dereplicate "$outputDir" -g /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/co
mbined_db_bins_refs/* -d --ignoreGenomeQuality

qsub -F '/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/dRep/' /home/projects/dtu_00009/data/Scripts/qsub_drep_dereplicate.sh

To see the differenece between the two directories - which genomes were removed by dRep:
diff -q dRep/dereplicated_genomes/ combined_db_bins_refs/

Only in combined_db_bins_refs/: GCA_003343585.1_ASM334358v1_genomic.fna
Only in combined_db_bins_refs/: S12C188.fna

from the dereplicated genomes .fna folders we need to concatenate all our genomes to one file:
cat $(ls *.fna) > ../../allGenomes.fasta

# allGenomes.fasta ends up with the format of exampleFiles/example12.txt

Creating scaffold to bin file. we need to conda activate env_drep og ellers køre følgende.  
parse_stb.py --reverse -f /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/dRep/dereplicated_genomes/*.fna  -o /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/genomes.stb

Mapping with bowtie2
mkdir bowtie2

#divided into two scripts one that builds index and one that maps. 
#create index
conda activate env_bowtie2

genome=$1
IndexOutput=$2

bowtie2-build "$genome" "$IndexOutput"
conda deactivate

qsub -F '/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/allGenomes.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/bowtie2/allGenomesMappingIndex.fa'  /home/projects/dtu_00009/data/Scripts/qsub_bowtie_build.sh

#Mapping
conda activate env_bowtie2

sampleName=$1
IndexOutput=$2
SamOutput=$3

bowtie2 -p 6 -x "$IndexOutput" -1 /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/"$sampleName"_1.fastq.gz -2 /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/"$sampleName"_2.fastq.gz > "$Samoutput"

conda deactivate

parallel "qsub -F '{1} /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/bowtie2/allGenomesMappingIndex.fa /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/mapped' /home/projects/dtu_00009/data/Scripts/qsub_bowtie.sh" :::: /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/sampleName 


Call genes on genomes using prodigal:
conda activate env_prodigal
input=$1
output=$2

prodigal -i "$input" -d "$output" -p meta
conda deactivate

qsub -F '/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/allGenomes.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/allGenomes.genes.fna' /home/projects/dtu_00009/data/Scripts/qsub_Lacto_prodigal.sh

#kører meta flag da de binned genomes er contigs / lidt i tvivl om hvad da andre er, scaffolds? 
 
Instrain:

inStrain profile /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/mapped/*.sam /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/allGenomes.fasta -o /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/profile/*.IS -p 6 -g /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/allGenomesGenes/allGenomes.genes.fna -s /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/genomes.stb 

conda activate env_instrain

samInput=$1
inputPath=$2
genomes=$3
outputPath=$4
genes=$5
scafToBins=$6

inStrain profile "$inputPath"/"$samInput".sam  "$genomes" -o "$outputPath"/"$samInput".IS -p 12 -g "$genes" -s "$scafToBins"

conda deactivate

parallel "qsub -F '{1} /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/mapped /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/allGenomes.fasta /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/instrain_profile /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/allGenomes.genes.fna /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/genomes.stb' /home/projects/dtu_00009/data/Scripts/qsub_instrain_profile.sh" :::: /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/sampleName 



instrain compare

inStrain compare -i /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/instrain_profile/*.IS/ -s /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/genomes.stb -p 6 -o /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/instrain_compare/

conda activate env_instrain

output=$1

inStrain compare -i /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/instrain_profile/*.IS/ -s /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/genomes.stb -p 6 -o "$output"

conda deactivate


qsub -F '/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/inStrain/instrain_compare/' /home/projects/dtu_00009/data/Scripts/qsub_instrain_compare.sh 


_______________________________________________________________________

FastTree

# alignments of the species representatives can be found in the GTDB output using the following code:
while read BIN;
do
        echo "$BIN"
        grep -A 1 "$BIN" gtdbtk.bac120.msa.fasta >> ../MSA/genus_refs.fasta ;

done < ../MSA/genus_rep_names.txt

#where genus_rep_names.txt is in the format of the exampleFiles/example10 and lists all the genome representatives that we want to include. This should be combined  with alignemnts done on the bins where a list of the dereplicated bins can be used in the format of exampleFiles/example13.txt instead of genus_rep_names.txt. Then the alignments can be used to create a tree with FastTree: 

conda activate env_fasttree

input=$1

FastTree "$input" >  /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/fastTree/bins_ref_outgroup
conda deactivate

qsub -F '/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/MSA/msa_ref_and_bins.fasta' /home/projects/dtu_00009/data/Scripts/Scripts_TM/qsub_fasttree.sh

__________
Making tree for genus representatives 
qsub -F '/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/MSA/genus_refs.fasta' /home/projects/dtu_00009/data/Scripts/Scripts_TM/qsub_fasttree.sh


Remaking trees with outgroup: Enterococcus Faecalis RS_GCF_000392875.1
grep -A 1 RS_GCF_000392875.1 gtdbtk.bac120.msa.fasta >> ../MSA/outgoup.fasta

ref_and_bins_outgroup.fasta
genus_ref_outgroup.fasta

_______________________________________________________________________

Kaiju
DB already made and indexed from may 2020


#code for running kaiju
conda activate kaiju

sample=$1

kaiju -t /home/projects/dtu_00009/data/Kaijudb/nodes.dmp -f /home/projects/dtu_00009/data/Kaijudb/nr_euk/kaiju_db_nr_euk.fmi -i /home/proje
cts/dtu_00009/data/chicken_data_TM/2_omgang/No_contamination/"$sample"_1.fastq.gz -j /home/projects/dtu_00009/data/chicken_data_TM/2_omgang
/No_contamination/"$sample"_2.fastq.gz -o /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/kaiju/out.kaiju
conda deactivate

#Test on one sample
qsub -F '/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/No_contamination/SRR6323414_1.fastq.gz /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/No_contamination/SRR6323414_2.fastq.gz' /home/projects/dtu_00009/data/Scripts/Scripts_TM/qsub_kaiju.sh

parallel "qsub -F '{1}' /home/projects/dtu_00009/data/Scripts/Scripts_TM/qsub_kaiju.sh" :::: /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/vamb/sampleName


compining samples with taxon names using Gisles script: https://github.com/gisleDK/Biopythonpieces/blob/master/Scripts/kaiju2phyloseq.py

kaiju2phyloseq.py -i all_samples/ -n /share/databases/Kaiju/kaiju_db_nr_euk_names.dmp -m /share/databases/Kaiju/nodes.dmp -o output_name 

kaiju2phyloseq.py -i /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/kaiju/ -n /home/projects/dtu_00009/data/Kaijudb/names.dmp -m /home/projects/dtu_00009/data/Kaijudb/nodes.dmp -o chick_kaiju 



_______________________________________________________________________

Prokka for gene annotation of genomes - correct file output for roary

move the observed reference genomes from the instrain combined_db_bins_ref folder to prokka/ref_genomes.

for FILE in $(cat /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/prokka/genome_files)
do
    cp ${FILE} /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/prokka/ref_genomes/
done


#example one sample
prokka --kingdom Bacteria --outdir prokka_GCA_000008285 --genus Listeria --locustag GCA_000008285 GCA_000008285.1_ASM828v1_genomic.fna

conda activate env_prokka

genome=$1
genome_file=$2

prokka --kingdom Bacteria --outdir /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/prokka/output/"$genome"  --cpus 32 --locustag "$genome" /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/prokka/ref_genomes/"$genome_file

conda deactivate

parallel --xapply "qsub -F '{1} {2}' /home/projects/dtu_00009/data/Scripts/Scripts_TM/qsub_prokka.sh " :::: /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/prokka/genome_names :::: /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/prokka/ref_genomes

#genome_names is in the format of exampleFiles/example14.txt  while ref_genomes is a folder containing all the genomes as fasta files (bins and references). 


#the bins has too long header names >37 so I have to change headernames using the following commands:

For S samples 

for i in S* ; do sed -E 's/>(.+)_S(.+)/>S\2/' $i > $i.o; done
for i in *.k ; do awk '/>/{sub(/\,/,"_"++i)}1' $i > $i.k ; done 

for GC samples ( første mellemrum )

for i in GC* ; do seqkit replace -p "\s.+" $i > $i.o.k; done

for FILE in $(cat /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/prokka/genome_files)
do
    mv ${FILE}.o.k ../ref_genomes/${FILE}
done

With the new headers we run the qsub_prokka.sh again. 
_______________________________________________________________________

roary 

Renaming output to contain genome name 
for FILE in $(cat /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/prokka/genome_names)
do
    mv ${FILE}/PROKKA_12142021.gff ${FILE}/PROKKA_${FILE}.gff
done

move the .gff in one folder 
for FILE in $(cat /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/prokka/genome_names)
do
    cp ${FILE}/PROKKA_${FILE}.gff /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/roary/input_gff/
done


#Roary only works on closely related strains so should be same species. I made a folder with each of the genomes from the same strain to navigate to and take all the .gff files as input. 
#qsub_roary.sh

conda activate env_roary
output=$1
folder=$2

cd "$folder"

roary -f "$output" -e -n -v -p 16 -g 70000 *.gff
conda deactivate

qsub -F ' /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/roary/output_salivarius /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/roary/input_gff/L_salivarius' qsub_roary.sh 


Make a tree for the core gene alingments 
conda activate env_fasttree

conda activate env_fasttree

input=$1
output=$2

FastTree -nt -gtr  "$input" > "$output"

conda deactivate

qsub -F '/home/projects/dtu_00009/data/chicken_data_TM/2_omgang/roary/output_salivarius/core_gene_alignment.aln /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/roary/output_salivarius/core_gene_tree.newick' /home/projects/dtu_00009/data/Scripts/Scripts_TM/qsub_fasttree.sh

this is used to create plots with roary_plots.py. in qsub_roary_plots.sh

conda activate env_roary
path=$1

cd "$path"

python  /home/projects/dtu_00009/people/majjag/Bin/Programs/miniconda3/envs/env_roary/bin/roary_p
lots.py "$path"core_gene_tree.newick "$path"gene_presence_absence.csv

qsub -F ' /home/projects/dtu_00009/data/chicken_data_TM/2_omgang/roary/output_salivarius/' qsub_roary_plot.sh 

_______________________________________________________________________


